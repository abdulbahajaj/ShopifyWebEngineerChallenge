{"version":3,"sources":["components/search/Search.js","App.js","serviceWorker.js","index.js","img/greyStar.PNG","img/greenStar.PNG","img/searchIcon.PNG"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchHandler","bind","assertThisInitialized","filter","search","keyboardEnter","favorite","data","i","length","uuid","v4","old","renderCard","renderFavorite","evt","target","value","forceUpdate","input","e","keywords","indexOf","keyCode","indexObj","findIndex","item","indexOfFavorite","elm","splice","push","_this2","cards","react_default","a","createElement","map","index","text","ReactParser","body","dangerouslySetInnerHTML","__html","toString","className","key","src","greenStar","alt","onClick","d","greyStar","title","id","favoriteCards","type","onChange","onKeyDown","name","placeholder","searchIcon","style","paddingBottom","background","marginLeft","paddingTop","color","Component","App","state","isLoading","console","log","Axios","get","then","setState","catch","err","error","alert","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.b63aaca5.chunk.js","sourcesContent":["import React, {Component} from 'react';\n//img\nimport greyStar from \"../../img/greyStar.PNG\";\nimport greenStar from \"../../img/greenStar.PNG\";\nimport searchIcon from \"../../img/searchIcon.PNG\";\n//css\nimport \"./search.css\";\n//utils\nimport uuid from \"uuid\";\nimport ReactParser from \"react-html-parser\";\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.searchHandler = this\n            .searchHandler\n            .bind(this);\n        this.filter = this\n            .filter\n            .bind(this);\n        this.search = this\n            .search\n            .bind(this);\n        this.keyboardEnter = this\n            .keyboardEnter\n            .bind(this);\n        this.favorite = this\n            .favorite\n            .bind(this);\n        var data = this.props;\n        for (var i = 0; i < data.data.length; i++){\n            data.data[i][\"uuid\"] = uuid.v4();\n            data.data[i][\"favorite\"] = false;\n        }\n        this.old = data;\n        this.renderCard = [];\n        this.renderFavorite = [];\n    }\n    //handles input for search bar\n    searchHandler(evt) {\n        if (evt.target.value === \"\") {\n            this.renderCard = [];\n            this.forceUpdate();\n        } else {\n            this.renderCard = this.filter(evt.target.value);\n        }\n    }\n    //filters array of data based on input\n    filter(input) {\n        var data = [];\n        data = this\n            .old\n            .data\n            .filter(e => {\n                if (e.keywords.indexOf(input) !== -1) {\n                    return e;\n                } else {\n                    \n                }\n            });\n        return data;\n    }\n    //allows search with enter key\n    keyboardEnter(e) {\n        if (e.keyCode === 13) {\n            this.search();\n        }\n    }\n    //adds cards to favorite section or removes it\n    favorite(e) {\n        var indexObj = this.old.data.findIndex(item=> item.uuid === e);\n        if (this.old.data[indexObj].favorite){\n            this.old.data[indexObj].favorite = false;\n            // remove from view\n            let indexOfFavorite = this.renderFavorite.findIndex(elm=> elm.uuid === e);\n            this.renderFavorite.splice(indexOfFavorite,1);\n        }else{\n            //add to rendered favourite cards\n            this.old.data[indexObj].favorite = true;\n            this.renderFavorite.push(this.old.data[indexObj]);\n        }\n        this.forceUpdate();\n    }\n    //rerenders components\n    search() {\n        this.forceUpdate();\n    }\n    render() {\n        var cards = \"\";\n        if (this.renderCard.length === 0) {\n            cards = (\n                <div></div>\n            );\n        } else {\n            cards = this\n                .renderCard\n                .map((e, index) => {          \n                     var text = ReactParser(e.body);\n                     var elm = <div dangerouslySetInnerHTML={{__html:text.toString()}}></div>\n                    return (\n                        <div className=\"card\" key={index}>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"title\">\n                                        <span className=\"iconstar\">\n                                            {e.favorite ? <img src={greenStar} alt=\"greenstar\" onClick={d => this.favorite(e.uuid)}></img> : <img src={greyStar} alt=\"greystar\" onClick={d => this.favorite(e.uuid)}></img> }                                           \n                                        </span>\n                                        <h2>{e.title}</h2>\n                                    </div>\n                                </div>\n                                <div className=\"clearfix\"></div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"description\" id=\"renderHTML\">                         \n                                        {elm}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                });\n        }\n        // Favorites\n        var favoriteCards = \"\";\n        if (this.renderFavorite.length === 0) {\n            favoriteCards = <div></div>\n        } else {\n            favoriteCards = this\n                .renderFavorite\n                .map((e, index) => {\n                    var text = ReactParser(e.body);\n                     var elm = <div dangerouslySetInnerHTML={{__html:text.toString()}}></div>\n                    return (\n                        <div className=\"card\" key={index}>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"title\">\n                                        <span className=\"iconstar\">\n                                        {e.favorite ? <img src={greenStar} alt=\"greenstar\" onClick={d => this.favorite(e.uuid)}></img> : <img src={greyStar} alt=\"greystar\" onClick={d => this.favorite(e.uuid)}></img> }                                           \n                                        </span>\n                                        <h2>{e.title}</h2>\n                                    </div>\n                                </div>\n                                <div className=\"clearfix\"></div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"description\">\n                                        {elm}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                });\n        }\n        return (\n            <div className=\"Search container-fluid\">\n                <div className=\"searchBar\">\n                    <input\n                        type=\"text\"\n                        onChange={this.searchHandler}\n                        onKeyDown={e => (this.keyboardEnter(e))}\n                        name=\"searchInput\"\n                        placeholder=\"search toronto waste...\"></input>\n                    <img\n                        id=\"searchIcon\"\n                        src={searchIcon}\n                        onClick={this.search}\n                        alt=\"green search icon\"></img>\n                    <div className=\"clearfix\"></div>\n                </div>\n                {/* SEARCH CONTENT AREA */}\n                <div className=\"searchContent\" style={{paddingBottom:\"20px\"}}>\n                <div className=\"row\">\n                    {/* Cards */}\n                    <div className=\"col-md-12\">\n                        {cards}\n                    </div>                    \n                </div>                  \n                </div>\n                {/* FAVOURITE CARDS AREA */}\n                <div\n                    className=\"favorites\"\n                    style={{\n                    background: \"rgb(247,254,250)\",\n                    paddingBottom:\"20px\"\n                }}>\n                    <div className=\"row\">\n                        <div className=\"title col-md-12\">\n                            <h1\n                                style={{\n                                marginLeft: \"29px\",\n                                paddingTop:\"20px\",\n                                color: \"rgb(35,153,92)\"\n                            }}>Favourites</h1>\n                        </div>\n                    </div>\n                    <div className=\"favoriteContent\">\n                    {/* Favorite Cards */}\n                        {favoriteCards}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Search;","import React, { Component } from 'react';\nimport './App.css';\nimport Axios from \"axios\";\nimport Search from './components/search/Search';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      data: [],\n      isLoading: true,\n    };\n    console.log(\"app has started\");\n  }\n\n  // fetchs api\n  componentDidMount(){\n    Axios.get(\"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000\").then(data=>{      \n      this.setState({\n        data: data.data,isLoading: false\n      });\n    }).catch(err=>{\n      this.setState({error: err,isLoading: false});\n      alert(\"Api request failed\");\n    });\n  }\n\n  render() {\n   const { isLoading } = this.state;\n   //render loading screen if api has not been fetched yet\n   if (isLoading) {\n     return (<div className=\"loading\"></div>)\n   }\n\n    return (\n      <div className=\"App container-default\">\n        <div className=\"header\">\n          <h1>Toronto Waste Lookup</h1>\n        </div>\n        <div className=\"Search-Area\">\n          <Search {...this.state}></Search>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/greyStar.d3675f95.PNG\";","module.exports = __webpack_public_path__ + \"static/media/greenStar.9679824d.PNG\";","module.exports = __webpack_public_path__ + \"static/media/searchIcon.2477def4.PNG\";"],"sourceRoot":""}